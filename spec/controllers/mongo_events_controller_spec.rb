# require 'spec_helper'

# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.

# describe MongoEventsController do

#   # This should return the minimal set of attributes required to create a valid
#   # MongoEvent. As you add validations to MongoEvent, be sure to
#   # adjust the attributes here as well.
#   let(:valid_attributes) { {  } }

#   # This should return the minimal set of values that should be in the session
#   # in order to pass any filters (e.g. authentication) defined in
#   # MongoEventsController. Be sure to keep this updated too.
#   let(:valid_session) { {} }

#   describe "GET index" do
#     it "assigns all mongo_events as @mongo_events" do
#       mongo_event = MongoEvent.create! valid_attributes
#       get :index, {}, valid_session
#       assigns(:mongo_events).should eq([mongo_event])
#     end
#   end

#   describe "GET show" do
#     it "assigns the requested mongo_event as @mongo_event" do
#       mongo_event = MongoEvent.create! valid_attributes
#       get :show, {:id => mongo_event.to_param}, valid_session
#       assigns(:mongo_event).should eq(mongo_event)
#     end
#   end

#   describe "GET new" do
#     it "assigns a new mongo_event as @mongo_event" do
#       get :new, {}, valid_session
#       assigns(:mongo_event).should be_a_new(MongoEvent)
#     end
#   end

#   describe "GET edit" do
#     it "assigns the requested mongo_event as @mongo_event" do
#       mongo_event = MongoEvent.create! valid_attributes
#       get :edit, {:id => mongo_event.to_param}, valid_session
#       assigns(:mongo_event).should eq(mongo_event)
#     end
#   end

#   describe "POST create" do
#     describe "with valid params" do
#       it "creates a new MongoEvent" do
#         expect {
#           post :create, {:mongo_event => valid_attributes}, valid_session
#         }.to change(MongoEvent, :count).by(1)
#       end

#       it "assigns a newly created mongo_event as @mongo_event" do
#         post :create, {:mongo_event => valid_attributes}, valid_session
#         assigns(:mongo_event).should be_a(MongoEvent)
#         assigns(:mongo_event).should be_persisted
#       end

#       it "redirects to the created mongo_event" do
#         post :create, {:mongo_event => valid_attributes}, valid_session
#         response.should redirect_to(MongoEvent.last)
#       end
#     end

#     describe "with invalid params" do
#       it "assigns a newly created but unsaved mongo_event as @mongo_event" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         MongoEvent.any_instance.stub(:save).and_return(false)
#         post :create, {:mongo_event => {  }}, valid_session
#         assigns(:mongo_event).should be_a_new(MongoEvent)
#       end

#       it "re-renders the 'new' template" do
#         # Trigger the behavior that occurs when invalid params are submitted
#         MongoEvent.any_instance.stub(:save).and_return(false)
#         post :create, {:mongo_event => {  }}, valid_session
#         response.should render_template("new")
#       end
#     end
#   end

#   describe "PUT update" do
#     describe "with valid params" do
#       it "updates the requested mongo_event" do
#         mongo_event = MongoEvent.create! valid_attributes
#         # Assuming there are no other mongo_events in the database, this
#         # specifies that the MongoEvent created on the previous line
#         # receives the :update_attributes message with whatever params are
#         # submitted in the request.
#         MongoEvent.any_instance.should_receive(:update_attributes).with({ "these" => "params" })
#         put :update, {:id => mongo_event.to_param, :mongo_event => { "these" => "params" }}, valid_session
#       end

#       it "assigns the requested mongo_event as @mongo_event" do
#         mongo_event = MongoEvent.create! valid_attributes
#         put :update, {:id => mongo_event.to_param, :mongo_event => valid_attributes}, valid_session
#         assigns(:mongo_event).should eq(mongo_event)
#       end

#       it "redirects to the mongo_event" do
#         mongo_event = MongoEvent.create! valid_attributes
#         put :update, {:id => mongo_event.to_param, :mongo_event => valid_attributes}, valid_session
#         response.should redirect_to(mongo_event)
#       end
#     end

#     describe "with invalid params" do
#       it "assigns the mongo_event as @mongo_event" do
#         mongo_event = MongoEvent.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         MongoEvent.any_instance.stub(:save).and_return(false)
#         put :update, {:id => mongo_event.to_param, :mongo_event => {  }}, valid_session
#         assigns(:mongo_event).should eq(mongo_event)
#       end

#       it "re-renders the 'edit' template" do
#         mongo_event = MongoEvent.create! valid_attributes
#         # Trigger the behavior that occurs when invalid params are submitted
#         MongoEvent.any_instance.stub(:save).and_return(false)
#         put :update, {:id => mongo_event.to_param, :mongo_event => {  }}, valid_session
#         response.should render_template("edit")
#       end
#     end
#   end

#   describe "DELETE destroy" do
#     it "destroys the requested mongo_event" do
#       mongo_event = MongoEvent.create! valid_attributes
#       expect {
#         delete :destroy, {:id => mongo_event.to_param}, valid_session
#       }.to change(MongoEvent, :count).by(-1)
#     end

#     it "redirects to the mongo_events list" do
#       mongo_event = MongoEvent.create! valid_attributes
#       delete :destroy, {:id => mongo_event.to_param}, valid_session
#       response.should redirect_to(mongo_events_url)
#     end
#   end

# end
